
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace Configs
{
public sealed partial class MenuConfig : Luban.BeanBase
{
    public MenuConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Icon = _buf.ReadString();
        ModuleNameIcon = _buf.ReadString();
        ModuleName = _buf.ReadString();
        Layer = _buf.ReadInt();
        ScreenFixType = _buf.ReadInt();
        IsFull = _buf.ReadBool();
        CloseBySelf = _buf.ReadInt();
        CloseOtherType = _buf.ReadInt();
        CloseHomeWindow = _buf.ReadBool();
        IsAutoOpenHomeWindow = _buf.ReadBool();
        CacheTime = _buf.ReadInt();
        LoaderId = _buf.ReadInt();
        BarType = _buf.ReadInt();
        BarIndex = _buf.ReadInt();
        OpenAnimation = _buf.ReadInt();
    }

    public static MenuConfig DeserializeMenuConfig(ByteBuf _buf)
    {
        return new MenuConfig(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 功能名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 图标id
    /// </summary>
    public readonly string Icon;
    /// <summary>
    /// 模块名称图片
    /// </summary>
    public readonly string ModuleNameIcon;
    /// <summary>
    /// 模块名称
    /// </summary>
    public readonly string ModuleName;
    /// <summary>
    /// 层级
    /// </summary>
    public readonly int Layer;
    /// <summary>
    /// 适配方案
    /// </summary>
    public readonly int ScreenFixType;
    /// <summary>
    /// 是否是全屏面板
    /// </summary>
    public readonly bool IsFull;
    /// <summary>
    /// 主动关闭
    /// </summary>
    public readonly int CloseBySelf;
    /// <summary>
    /// 关闭其他面板
    /// </summary>
    public readonly int CloseOtherType;
    /// <summary>
    /// 是否关闭主界面
    /// </summary>
    public readonly bool CloseHomeWindow;
    /// <summary>
    /// 关闭时是否主动打开主界面
    /// </summary>
    public readonly bool IsAutoOpenHomeWindow;
    /// <summary>
    /// 缓存时间
    /// </summary>
    public readonly int CacheTime;
    /// <summary>
    /// 加载面板类型<br/>0：不显示加载界面<br/>1：转圈圈<br/>2：启动加载界面<br/>3：pve加载界面<br/>4：系统场景切换加载界面<br/>5：pvp加载界面<br/>6：小游戏加载界面
    /// </summary>
    public readonly int LoaderId;
    /// <summary>
    /// 按钮所在栏<br/>
    /// </summary>
    public readonly int BarType;
    /// <summary>
    /// 按钮所在位置
    /// </summary>
    public readonly int BarIndex;
    /// <summary>
    /// 打开动画
    /// </summary>
    public readonly int OpenAnimation;
   
    public const int __ID__ = 1102421409;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "icon:" + Icon + ","
        + "moduleNameIcon:" + ModuleNameIcon + ","
        + "moduleName:" + ModuleName + ","
        + "layer:" + Layer + ","
        + "screenFixType:" + ScreenFixType + ","
        + "isFull:" + IsFull + ","
        + "closeBySelf:" + CloseBySelf + ","
        + "closeOtherType:" + CloseOtherType + ","
        + "closeHomeWindow:" + CloseHomeWindow + ","
        + "isAutoOpenHomeWindow:" + IsAutoOpenHomeWindow + ","
        + "cacheTime:" + CacheTime + ","
        + "loaderId:" + LoaderId + ","
        + "barType:" + BarType + ","
        + "barIndex:" + BarIndex + ","
        + "openAnimation:" + OpenAnimation + ","
        + "}";
    }
}
}

